<!--c-algorithm-->
## pset 3 

----

[pset3](https://cdn.cs50.net/2014/spring/psets/3/hacker3/hacker3.html)

### find

* 要求：生成随机数，对其排序，再搜索一个数是不是在这些随机数中
* 掌握：搜索排序算法，多文件组合，随机数生成，Makefile编写，[管道符](pipe.html)重定向，递归函数
* 难点：
    - 分制的思想
    - 排序：bubble,selection, insertion, merge, counting sort的实现
    - binary search
    - 数组函数，指针函数
    - 不同功能程序在命令行中的组合
    - 对于知道范围整数的排序，可以用counting sort来实现O(n)的时间复杂度

* note
    - 关于多文件组合, 一个文件可能包含多个功能类似的函数, 可以写一个filename.h, 在 filename.c 包括进来就行了
    - main 文件中只要包含了其他文件的h文件就行, 编译的时候要一起编译
    - 理解递推和循环的差异，优劣点(binary search 两种方法都可以用，但是循环更容易理解，因为其不涉及到多个子进程的同时进行，对比merge sort，分制后每部分都得进行。对于像binary search的线性程序，循环比递归更加直接，另外有时候递归会比迭代产生高的多的复杂度，斐波拉切数列就是一个非常好的例子，用迭代，不要牺牲空间，只要3n次计算就能出来，而用递归，计算次数是2的n次方，产生了无数的stack帧。
    - 关于排序方法，见算法[排序](sort.html)

``` makefile
find: find. c helpers.c helpers.h
    clang -ggdb3 -O0 -std=c99 -Wall -Werror -o find find.c helpers.c -lcs50 -lm
```

```cpp
/***************************************************************************
 * generate.c
 *
 * Computer Science 50
 * Problem Set 3
 *
 * Generates pseudorandom numbers in [0,LIMIT), one per line.
 *
 * Usage: generate n [s]
 *
 * where n is number of pseudorandom numbers to print
 * and s is an optional seed
 ***************************************************************************/
 
// standard libraries
#define _XOPEN_SOURCE
#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

// constant
#define LIMIT 65536

int main(int argc, string argv[])
{
    if (argc != 2 && argc != 3)
    {
        printf("Usage: generate n [s]\n");
        return 1;
    }

    // TODO: converse string to number
    int n = atoi(argv[1]);

    // TODO: the third argv as a seed
    if (argc == 3)
    {
        srand48((long int) atoi(argv[2]));
    }
    else
    {
        srand48((long int) time(NULL));
    }

    // TODO: change random deci to interge
    for (int i = 0; i < n; i++)
    {
        printf("%i\n", (int) (drand48() * LIMIT));
    }

    // success
    return 0;
}
```

```cpp
#include <stdlib.h>
#define LIMIT 65536

int binary_search(int value, int* arr, int n);
int get_insertion_index(int value, int* arr, int n);
void selection_sort(int* arr, int n);
void bubble_sort(int* arr, int n);
void insertion_sort(int* arr, int n);
void merge_sort(int* arr, int n);
void counting_sort(int* arr, int n);
void swap(int* p, int* q);
```

```cpp
/**
 * helpers.c
 *
 * Computer Science 50
 * Problem Set 3
 *
 * Helper functions for Problem Set 3.
 */
#include "helpers.h"

int binary_search(int value, int* arr, int n)
{
    int beginning = 0;
    int ending = n - 1;
    int middle; 

    while (ending >= beginning)
    {
        middle = (beginning + ending) / 2; 
        if (value == *(arr + middle))
            return 1; 
        else if (value < *(arr + middle))
            ending = middle - 1;
        else
            beginning = middle + 1;
    }
    return 0;
}

int get_insertion_index(int value, int* arr, int n)
{
    int beginning = 0;
    int ending = n - 1;
    int middle; 

    while (ending >= beginning)
    {
        middle = (beginning + ending) / 2; 
        if (value == *(arr + middle))
            return middle; 
        else if (value < *(arr + middle))
            ending = middle - 1;
        else
            beginning = middle + 1;
    }
    if (value < *(arr + middle))
        return middle;
    else
        return middle + 1;
}

void selection_sort(int* arr, int n)
{
    int index;
    for (int i = 0; i < n; i++)
    {
        index = i;
        for (int j = i + 1; j < n; j++)
        {
            if (*(arr + index) > *(arr + j))
            {
                index = j; 
            }
        }
        swap(arr + i, arr + index);
    }
}

void bubble_sort(int* arr, int n)
{
    for (int i = 0; i < n; i++)
    {
        int swaped = 0;
        for (int j = 0; j < n - 1; j++)
        {
            if (*(arr + j) > *(arr + j + 1))
            {
                swap(arr + j, arr + j + 1);
                swaped++;
            }
        }
        if(!swaped)
            break;
    }
}

void insertion_sort(int* arr, int n)
{
    for(int i = 0; i < n - 1; i++)
    {
        for(int j = i; j >= 0; j--)
        {
            if (*(arr + j + 1) < *(arr + j))
            {
                swap(arr + j, arr + j + 1);
            }
        }
        
    }
}

void merge_sort(int* arr, int n)
{
    if (1 == n)
    NULL;
    else
    {
        // spit in half
        int m = n / 2;
        merge_sort(arr, m);
        merge_sort(arr + m, n - m);

        // make a copy
        int* tmp = malloc(sizeof(int) * n);
        for (int i = 0; i < n; i++)
            *(tmp + i) = *(arr + i);

        // merge
        int i = 0, j = m, k = 0;
        while (i < m && j < n)
            *(arr + k++) = (*(tmp + i) < *(tmp + j)) ? *(tmp + i++) : *(tmp + j++);

        // finish left part if didnot finished yet
        while (i < m)
            *(arr + k++) = *(tmp + i++);

        free(tmp);
    }
}

void counting_sort(int* arr, int n)
{
    int* bucket = malloc(sizeof(int) * LIMIT);
    for (int i = 0; i < n; i++)
        (*(bucket + *(arr + i)))++;
    int j = 0;
    for (int i = 0; i < LIMIT; i++)
        while ((*(bucket + i))--)
            *(arr + j++) = i;
    free(bucket);
}

void swap(int* p, int* q)
{
    int tmp = *p;
    *p = *q;
    *q = tmp;
}
```

```cpp
/**
 * find.c
 *
 * Computer Science 50
 * Problem Set 3
 *
 * Prompts user for as many as MAX values until EOF is reached, 
 * then proceeds to search that "haystack" of values for given needle.
 *
 * Usage: ./find needle
 *
 * where needle is the value to find in a haystack of values
 */
       
#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>

#include "helpers.h"

// maximum amount of hay
const int MAX = 65536;

int main(int argc, string argv[])
{
    // ensure proper usage
    if (argc != 2)
    {
        printf("Usage: ./find needle\n");
        return -1;
    }

    // remember needle
    int needle = atoi(argv[1]);

    // fill haystack
    int size;
    int haystack[MAX];
    for (size = 0; size < MAX; size++)
    {
        // wait for hay until EOF
        //printf("\nhaystack[%d] = ", size);
        int straw = GetInt();
        if (straw == INT_MAX)
        {
            break;
        }
     
        // add hay to stack
        haystack[size] = straw;
    }

    // sort the haystack
    //bubble_sort(haystack, size);
    //selection_sort(haystack, size);
    //insertion_sort(haystack, size);
    //merge_sort(haystack, size);
    counting_sort(haystack, size);

    // try to find needle in haystack
    if (binary_search(needle, haystack, size))
    {
        printf("\nFound needle in haystack!\n\n");
        return 0;
    }
    else
    {
        printf("\nDidn't find needle in haystack.\n\n");
        return 1;
    }
}
```

### [game of fifeen](https://en.wikipedia.org/wiki/15_puzzle)

这个作业我个人感觉最难，当然当时觉得非常有趣，也学到非常多的东西。但是在最近(2015)的教程中，这个作业已经没了，将之后的breakout提前，后面的网页分成了两个作业
    
* 要求：写一个数字拼盘游戏，需要随机的开盘，并实现上帝模式
* 掌握：数组
* 难点：
    - 大量的数学知识: 变形等价, [置换奇偶性](https://zh.wikipedia.org/zh-hant/%E7%BD%AE%E6%8D%A2%E7%9A%84%E5%A5%87%E5%81%B6%E6%80%A7), Manhattan距离
    - 随机开盘
    - [A星演算法](https://zh.wikipedia.org/zh/A*%E6%90%9C%E5%AF%BB%E7%AE%97%E6%B3%95)
    - [Dijkstra算法](http://zh.wikipedia.org/wiki/Dijkstra%E7%AE%97%E6%B3%95)
    - 上帝模式
* note
    - 因为并不是任何一个随机序列都会有解，实际上有解的序列和无解的序列一样多，这东西就涉及到置换以及等价变形。为实现上帝模式，需要实现搜索算法。
    - 特殊输出格式([escape](http://isthe.com/chongo/tech/comp/ansi_escapes.html))
    - [escape](escape.html)如下：
    - escape 打印能控制输出的颜色, 背景色, 控制光标移动等<br>
    - 如下条命令就打出黄色的hello world, 注意后面要设置关闭所有属性, 否则所有东西都会是黄的. 

```cpp
  printf("\033[1;33m Hello World. \033[0m \n");
  printf("\033[2J"); \\clean above
  printf("\033[%d;%dH",0,0); \\move curse
```
* 注解
  由于最开始的时候空格位于右下角，结束的时候也要位于右下角，所以不管怎么玩，空格都要走偶数的步数，每一步都是一个置换，所以这个游戏只能是经过偶数次的置换。一个数列不管怎么打乱，最终的置换数如果是奇数的话，只能经过奇数的置换才能恢复，在这种情况下游戏是无解的，所以初始化的时候一定要随机出一个偶数置换。所以随机出来后是奇数置换则还需要加上一个置换。
  关于GOD模式，大概的思路是这样的：
  
* 对于大于3的方格，先实现第一排和第一列的，再实现第二排和第二列的，直到剩下一个3X3的方格
    - 找到第一排需要的对应的数字，判断要往上或往左或右移动多少步
    - 移动方格(方格初始位置在右下角，采用某种移动策略，使得移动空格的时候不会影响要移动的数字)到数字该方向的一侧
    - 再移动数字并将空格移动到右下角，这两个过程就将该数字朝需要的方向移动了一格
    - 重复前面两个步骤，直到该数字移动到需要的位置，再换另外一个数字
* 完成3X3
* 详细的过程实际上要复杂很多，比如：
    - 完成某一排时，如果剩下最后一个的时候，不能直接移动过去，所以在移动倒数第二个的时候，要把这个先移动到最后的一格，然后再移动最后一个，这时候也会出现特殊情况，即最后一格是倒数第二个数，而最后一个数却占在倒数第二格的位置，简单的说就是形成 1，3,2，这种情况下要把3先移动到下下行（这样才不会被干扰），再移动2到最后一格，再移动3到2下面，最后才形成1,2,3
    

```cpp
/**
 * fifteen.c
 * Computer Science 50
 * Problem Set 3
 *
 * Implements the Game of Fifteen (generalized to d x d).
 *
 * Usage: ./fifteen d
 *
 * whereby the board's dimensions are to be d x d,
 * where d must be in [MIN,MAX]
 *
 * Note that usleep is obsolete, but it offers more granularity than
 * sleep and is simpler to use than nanosleep; `man usleep` for more.
 */
 
#define _XOPEN_SOURCE 500

#include <cs50.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <math.h>
#include <string.h>

// board's minimal dimension
#define MIN 3

// board's maximal dimension
#define MAX 20
#define WAIT 500000

// board, whereby board[i][j] represents row i and column j
int board[MAX][MAX];

// board's dimension
int d;

// prototypes
void clear(void);
void greet(void);
void init(void);
void draw(void);
bool move(int tile);
bool won(void);
void save(void);
void showAndSave(void);

void findTile(int* x, int* y, int tile);
void moveBlank(int i, int j);
void moveUp(int row, int colu);
void moveDown(int row, int colu);
void moveLeft(int row, int colu);
void moveRight(int row, int colu);
void moveToAB(int x, int y, int a, int b);
void moveRow(int n);
void moveThree();

void randArray(int array[], int n);
int isParity(int array[], int n);

int main(int argc, string argv[])
{
    // greet player
    greet();

    // ensure proper usage
    if (argc != 2)
    {
        printf("Usage: ./fifteen d\n");
        return 1;
    }

    // ensure valid dimensions
    d = atoi(argv[1]);
    if (d < MIN || d > MAX)
    {
        printf("Board must be between %i x %i and %i x %i, inclusive.\n",
            MIN, MIN, MAX, MAX);
        return 2;
    }

    // initialize the board
    init();

    // accept moves until game is won
    while (true)
    {
        // clear the screen
        clear();

        // draw the current state of the board
        draw();

        // saves the current state of the board (for testing)
        save();

        // check for win
        if (won())
        {
            printf("ftw!\n");
            break;
        }

        // prompt for move
        printf("Tile to move: ");
        
        char* input = GetString();
        if(!strcmp(input, "GOD"))
        {
            for (int i = 0; i < d - 3; i++)
                moveRow(i);
            moveThree();
        }
        // move if possible, else report illegality
        else if(!move(atoi(input)))
        {
            printf("\nIllegal move.\n");
            usleep(WAIT);
        }
        // sleep for animation's sake
        usleep(WAIT);
    }

    // that's all folks
    return 0;
}

/**
 * Clears screen using ANSI escape sequences.
 */
void clear(void)
{
    printf("\033[2J");
    printf("\033[%d;%dH", 0, 0);
}

/**
 * Greets player.
 */
void greet(void)
{
    clear();
    printf("GAME OF FIFTEEN\n");
    usleep(WAIT);
}


/* return parity of a array
*  0 if the parity is even
*  1 if the parity is odd
*  if the array is sorted, the number in it is from 1 to n
*  where n is the lenth of array
*/
int isParity(int array[], int n)
{
    int* tmp = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++)
        tmp[i] = array[i];

    int p = 0;
    for (int i = 0; i < n; i++)
    {
        int t = i;
        while ((tmp[t] != i + 1) && (tmp[t] != 0))
        {
            tmp[t] = 0;
            t = array[t] - 1;
            p++;
        }
        tmp[t] = 0;
    }
    free(tmp);
    return p % 2;
}

/* random a array
*  the array must from 1 to n, and sorted
*/
void randArray(int array[], int n)
{
    int* tmp = malloc(n * sizeof(int));
    for (int i = 0; i < n; i++)
        tmp[i] = array[i];
    srand(time(NULL));
    for (int i = 0; i < n; i++)
    {
        int r = rand()%(n - i) + 1;
        int k;
        for (k  = 0; k < n; k++)
        {
            if (tmp[k] != 0)
            {
                if (r == 1)
                    break;
                r--;
            }
        }
        array[i] = tmp[k];
        tmp[k] = 0;
    }
    free(tmp);
}

/**
 * Initializes the game's board with tiles numbered 1 through d*d - 1,
 * (i.e., fills board with values but does not actually print them),
 * whereby board[i][j] represents row i and column j.
 */
void init(void)
{
    int n = d * d - 1;
    int* tmpArray = malloc((n + 1) * sizeof(int));
    for (int i = 0; i < n; i++)
        tmpArray[i] = i + 1;
    tmpArray[n] = 0;
    
    randArray(tmpArray, n);

    //the parity of array plus the taxicab of black(in the right  bottom) must be even
    //see wiki/N-puzzle
    //int taxicab = d + d - 2;
    //int cantSlove = (taxicab + isParity(tmpArray, n)) % 2;
    if (isParity(tmpArray, n))
    {
        int tmp = tmpArray[n-1];
        tmpArray[n-1] = tmpArray[n-2];
        tmpArray[n-2] = tmp;
    }

    for(int i = 0; i < d; i++)
    {
        for(int j = 0; j < d; j++)
        {
           board[i][j] = tmpArray[i*d+j];
        }
    }
    free(tmpArray);
}

/**
 * Prints the board in its current state.
 */
void draw(void)
{
    for(int i = 0; i < d; i++)
    {
        for (int j = 0; j < d; j++)
            if(board[i][j])
                printf("\033[1;43m      \033[0m");
            else
                printf("\033[5m\033[1;45m      \033[0m");
        printf("\n");
        for(int j = 0; j < d; j++)
        {
            if(board[i][j])
                printf("\033[1;43m\033[1;34m%4d  \033[0m",board[i][j]);
            else
                printf("\033[5m\033[1;45m      \033[0m");
        }
        printf("\n");
    }
}

/**
 * If tile borders empty space, moves tile and returns true, else
 * returns false. 
 */
bool move(int tile)
{
    if ((tile < 1) || (tile > d * d -1))
        return false;
    int row_tile, colu_tile, row_0, colu_0;

    findTile(&row_tile, &colu_tile, tile);
    findTile(&row_0, &colu_0, 0);

    if((abs(row_tile -  row_0) + abs(colu_tile - colu_0)) == 1)
        {
            board[row_0][colu_0] = board[row_tile][colu_tile];
            board[row_tile][colu_tile] = 0;
            showAndSave();
            return true;
        }
    else
        return false;
}

/**
 * Returns true if game is won (i.e., board is in winning configuration), 
 * else false.
 */
bool won(void)
{
    for (int i = 0; i < d - 1; i++)
    {
        for (int j = 0; j < d; j++)
        {
            if (board[i][j] != (i * d + j + 1))
                return false;
        }
    }
    for (int j = 0; j < d - 1; j++)
    {
        if (board[d-1][j] != ((d - 1) * d + j + 1))
            return false;
    }
    return true;
}

/**
 * Saves the current state of the board to disk (for testing).
 */
void save(void)
{
    // log
    const string log = "log.txt";
    // delete existing log, if any, before first save
    unlink(log);
    // open log
    FILE* p = fopen(log, "a");
    if (p == NULL)
        return;

    // log board
    fprintf(p, "{");
    for (int i = 0; i < d; i++)
    {
        fprintf(p, "{");
        for (int j = 0; j < d; j++)
        {
            fprintf(p, "%i", board[i][j]);
            if (j < d - 1)
            {
                fprintf(p, ",");
            }
        }
        fprintf(p, "}");
        if (i < d - 1)
        {
            fprintf(p, ",");
        }
    }
    fprintf(p, "}\n");
    // close log
    fclose(p);
}

void showAndSave()
{
    clear();
    draw();
    save();
    usleep(WAIT);
}

/* find the x, y of tile */
void findTile(int* x, int* y, int tile)
{
    for (int i = 0; i < d; i++)
        for (int j = 0; j < d; j++)
            if (board[i][j] == tile)
            {
                *x = i;
                *y = j;
            }
}

/* find and move the blank to x, y */
void moveBlank(int x, int y)
{
    int row, colu;
    findTile(&row, &colu, 0); 

    int tile_x, tile_y;
    for (int i = 0; i < abs(row - x); i++)
    {
        tile_x = (row > x)?(row - 1 - i):(row + 1 + i);
        tile_y = colu;
        move(board[tile_x][tile_y]);
    }
    for (int i = 0; i < abs(colu - y); i++)
    {
        tile_x = x;
        tile_y = (colu > y)?(colu - 1 - i):(colu + 1 + i);
        move(board[tile_x][tile_y]);
    }
}

/* move the origin x, y tile to house */
void moveToAB(int x, int y, int a, int b)
{
    // reset the blank
    moveBlank(d - 1, d - 1);
    int tile = x * d + y + 1;
    int row, colu;
    findTile(&row, &colu, tile); 
    if(colu == d - 1)
    {
        moveBlank(d - 1, d - 2);
        moveBlank(row, colu - 1);
        move(tile);
        colu--;
    }
    else
    {
        moveBlank(row, colu +1);
    }
    
    if(row == d-1)
        moveUp(row--, colu);

    while((b - colu) > 0)
        moveRight(row, colu++);
    while((row - a) > 0)
        moveUp(row--, colu);
    while((a - row) > 0)
        moveDown(row++, colu);
    while((colu - b) > 0)
        moveLeft(row, colu--);
}

void moveLeft(int row, int colu)
{
    move(board[row+1][colu+1]);
    move(board[row+1][colu]);
    move(board[row+1][colu-1]);
    move(board[row][colu-1]);
    move(board[row][colu]);
}
void moveRight(int row, int colu)
{
    move(board[row][colu]);
    move(board[row+1][colu]);
    move(board[row+1][colu+1]);
    move(board[row+1][colu+2]);
    move(board[row][colu+2]);
}
void moveUp(int row, int colu)
{
    move(board[row-1][colu+1]);
    move(board[row-1][colu]);
    move(board[row][colu]);
    move(board[row][colu+1]);
    move(board[row-1][colu+1]);
}
void moveDown(int row, int colu)
{
    move(board[row+1][colu+1]);
    move(board[row+1][colu]);
    move(board[row][colu]);
    move(board[row][colu+1]);
    move(board[row+1][colu+1]);
}

void moveRow(int n)
{
    // begin to fix n row
    for(int i = n; i < d - 1; i++)
    {
        moveToAB(n, i, n, i);
    }
        move(board[n][d-2]); //move 3 to the border
        moveToAB(n, d - 1, n + 1, d -2); // move 4 to beneath ori 3
        move(board[n+1][d-2]);//move 4 to the borde to beneath now 3
        moveBlank(n, d - 2);
        move(board[n][d-1]);//move 3 back
        move(board[n+1][d-1]);// move 4 back
    // begin to fix n colu
    for(int i = n + 1; i < d - 1; i++)
    {
        moveToAB(i, n, i, n);
    }
        moveBlank(d - 1, n + 1);
        moveBlank(d - 1, n);
        move(board[d-2][n]);
        moveBlank(d - 2, n + 1);
        moveBlank(d - 1, d -1);
        moveToAB(d - 1, n, d - 2, n + 1);
        moveBlank(d - 1, n + 2);
        moveBlank(d - 1, n + 1);
        move(board[d-2][n+1]);
        move(board[d-2][n]);
        move(board[d-1][n]);
        move(board[d-1][n+1]);
}
void moveThree()
{
    // move the 1st tile
    moveBlank(d - 1, d - 1);
    int row, colu;
    int tile = (d - 3) * d + (d - 3) + 1;
    findTile(&row, &colu, tile);
    if(row == d - 1)
    {
        moveBlank(d - 2, d - 1);
        moveBlank(d - 2, colu);
        move(tile);
        row--;
    }
    if(row == d - 2)
    {
        if(colu == d - 1)
        {
            moveBlank(d - 1, d - 2);
            moveBlank(row, d - 2 );
            move(tile);
            colu--;
        }
        moveBlank(d - 1, d - 1);
        moveBlank(d - 3, d - 1);
        moveBlank(d - 3, colu);
        move(tile);
        row--;
    }
    if(row == d - 3)
    {
        if(colu == d - 1)
        {
            moveBlank(d - 1, d - 2);
            moveBlank(d - 3, d - 2);
            move(tile);
            colu--;
            moveBlank(d - 1, d - 1);
        }
        if(colu == d - 2)
        {
            moveBlank(d - 2, d - 3);
            moveBlank(d - 3, d - 3);
            move(tile);
            colu--;
        }
    }

    moveBlank(d - 1, d - 1);
    // move the 2nd tile
    tile = (d - 3) * d + (d - 2) + 1;
    findTile(&row, &colu, tile);
    if(row == d - 1)
    {
        moveBlank(d - 2, d - 1);
        moveBlank(d - 2, colu);
        move(tile);
        row--;
    }
    if(row == d - 2)
    {
        if(colu == d - 3)
        {
            moveBlank(d - 1, d - 1);
            moveBlank(d - 2, d - 2);
            move(tile);
            colu++;
            moveBlank(d - 1, d - 3);
        }

        if(colu == d - 2)
        {
            moveBlank(d - 1, d - 1);
            moveBlank(d - 2, d - 1);
            move(tile);
            colu++;
            moveBlank(d - 1, d - 2);
        }

        if(colu == d - 1)
        {
            moveBlank(d - 1, d - 2);
            moveBlank(d - 3, d - 2 );
            moveBlank(d - 3, d - 1 );
            move(tile);
            row--;
        }
    }
    else if((row  == d - 3) && (colu == d - 2))
    {
        moveBlank(d - 1, d - 1);
        moveBlank(d - 3, d - 1);
        move(tile);
        colu++;
        moveBlank(d - 1, d - 2);
    }

    moveBlank(d - 1, d - 1);
    // move the 3rd tile
    tile = (d - 3) * d + (d - 1) + 1;
    findTile(&row, &colu, tile);
    
    if(row == d - 3)
    {
        moveBlank(d - 2, d - 2);
        moveBlank(d - 3, d - 2);
        moveBlank(d - 3, d - 1);
        moveBlank(d - 1, d - 1);
        moveBlank(d - 1, d - 2);
        moveBlank(d - 2, d - 2);
        moveBlank(d - 2, d - 1);
        moveBlank(d - 3, d - 1);
        moveBlank(d - 3, d - 2);
        moveBlank(d - 1, d - 2);
        row++;
    }

    else if(row == d - 1)
    {
        moveBlank(d - 2, d - 1);
        moveBlank(d - 2, colu);
        move(tile);
        row--;
    }
    if(colu == d - 3)
    {
        moveBlank(d - 1, d - 2);
        moveBlank(d - 2, d - 2);
        move(tile);
        colu++;
        moveBlank(d - 1, d - 3);
    }
    if(colu == d -2)
    {
        moveBlank(d - 1, d - 1);
        moveBlank(d - 2, d - 1);
        move(tile);
        colu++;
    }
    moveBlank(d - 1, d - 2);
    moveBlank(d - 3, d - 2);
    moveBlank(d - 3, d - 1);
    moveBlank(d - 2, d - 1);
    
    // move the 4th tile
    moveBlank(d - 1, d - 1);
    tile = (d - 2) * d + (d - 3) + 1;
    findTile(&row, &colu, tile);
    
    if(row == d - 2)
    {
        while(colu != d - 3)
        {
            moveBlank(d - 1, colu - 1);
            moveBlank(d - 2, colu - 1);
            move(tile);
            colu--;
            moveBlank(d - 1, colu + 1);
        }
        moveBlank(d - 1, d - 3);
        move(tile);
        row++;
        moveBlank(d - 2, d - 1);
        moveBlank(d - 1, d - 1);
    }
    else
    {
        if(colu == d - 2)
        {
            moveBlank(d - 2, d - 1);
            moveBlank(d - 2, d - 3);
            moveBlank(d - 1, d - 3);
            move(tile);
            colu--;
        }
    }

    // move the 7th tile
    moveBlank(d - 1, d - 1);
    tile = (d - 1) * d + (d - 3) + 1;
    findTile(&row, &colu, tile);
    
    if(row ==  d - 2)
    {
        if (colu == d - 3)
        {
            moveBlank(d - 2, d - 2);
            moveBlank(d - 2, d - 3);
            moveBlank(d - 1, d - 3);
            moveBlank(d - 1, d - 1);
            moveBlank(d - 2, d - 1);
            moveBlank(d - 2, d - 2);
            moveBlank(d - 1, d - 2);
            moveBlank(d - 1, d - 3);
            moveBlank(d - 2, d - 3);
            moveBlank(d - 2, d - 2);
            moveBlank(d - 2, d - 1);
            moveBlank(d - 1, d - 1);
            moveBlank(d - 1, d - 2);
            moveBlank(d - 2, d - 2);
        }
        else
        {
            if(colu == d -1)
            {
                moveBlank(d - 1, d - 2);
                moveBlank(d - 2, d - 2);
                moveBlank(d - 2, d - 1);
                moveBlank(d - 1, d - 1);
            }
            moveBlank(d - 1, d - 2);
            move(tile);
        }
    }
    else
    {
        moveBlank(d - 2, d - 1);
        moveBlank(d - 2, d - 2);
    }
    moveBlank(d - 2, d - 3);
    moveBlank(d - 1, d - 3);
    moveBlank(d - 1, d - 2);



    // move the 5th tile
    moveBlank(d - 1, d - 1);
    tile = (d - 2) * d + (d - 2) + 1;
    findTile(&row, &colu, tile);

    if((row == d - 2) && (colu == d -1))
    {
        moveBlank(d - 1, d - 2);
        moveBlank(d - 2, d - 2);
        moveBlank(d - 2, d - 1);
        moveBlank(d - 1, d - 1);
    }
    else if((row == d - 1) && (colu == d - 2))
    {
        moveBlank(d - 2, d - 1);
        moveBlank(d - 2, d - 2);
        moveBlank(d - 1, d - 2);
        moveBlank(d - 1, d - 1);
    }

} 
```
