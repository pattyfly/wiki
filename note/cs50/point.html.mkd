<!--c-->
### point

----

指针主要在lecture 5 . 字符串实际上是指针的地址. `char* s = "abc";` `s`就是"abc"的地址, 具体来讲是头个字符的地址, s 跟 &s[0] 指向同一个东西.  
    
#### 动态内存

```cpp
char* s = malloc((strlen(s)+1)*sizeof(char));
```

#### 初始化

```cpp 
int a = 1; int* x = &a //正确
int a = 1; int* x(=NULL); *x = a; //这样就不对, x是一个空地址：ox00, 不能赋值
```

**注意:**由于指针的随意性, 在定义指针的时候一定要给他分配初始值, 要指向某个具体的地方, 否则就会出现严重的错误. 

#### 指针和数组

```cpp
int arr[] = {1, 2, 3, 4};
int* p = arr;
```

*注意:* 这段代码很有迷惑性，我刚学的时候经常搞错，`p`是一个`int`型的指针，p是内存中的一个地址。等式右端，也就是赋值源`arr`并不是一个地址，`arr`是整个数组，而`&arr`才是一个地址，而且重要的是，这两个地址虽然指向同一个地方，但是类型却是不同的，`&arr`长度为8，`p`的长度为2。真正和p相同的是`&arr[0]`.所以代码的第二行可以写成`int* p = &arr[0];`, 其实际意义也是一个指向数组第一个元素的指针。同理，当数组名作为参数传递的时候，也只是传递第一个元素的地址

-   [pset4](pset4.html)对指针有进一步的认识

#### malloc

-   section 4 有一些关于指针的内容, 特别是海豚的例子, 涉及到堆栈
-   因为在一个子函数结束的时候，他所在的stack框架会被销毁，所以malloc分配的空间得保存在heap里面, 这时需要自己释放
-   如果想要函数创建一个数组并返回, 需要用malloc, 在heap上申请内存, 向java这种语言, 直接在函数里面就可以创建对象, 并返回对象引用. 默认的就是在heap上存储所有复杂数据. 
-   [pset2](pset2.html)对malloc有进一步的认识，section5 的这个小函数 [cp](cp.html) 也有一些malloc和空间的东西，从这个程序也能看到指针`*`和`&`的优劣。
-   section 4 main 里面数组大小是n, 是个变量, 在网上查了一下, C99已经可以这样搞了
-   字符串初始化, 可以这样`char* c = "abc";` 后面不需要\\0(NULL)
-   对于malloc的内存的单位的默认值, bool 为 fasle, 指针是 NULL
-   但是用valgrind检查, 就会出现错误, 所以必须要给这些变量赋值. 
-   记得用 [valgrind](valgrind.html) 检查问题

