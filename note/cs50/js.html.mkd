<!--js-->
## javascript
-------

### 语法

* 变量
    - 数字(2, 3.14, 0.4)
    - 字符串("hello world!")
    - 逻辑值(fasle, true)
    - list(["Monday", 'c', 5]);

用`var`申明，没有类型限定，可以讲原来的数字变量重新赋值为字符串。list是有顺序的。







### 常用函数

* 基本

`.length`;`.toUpperCase()` `console.log()`; `prompt()`; `confirm()`; `isNaN()`(is not a number)

> > 其中prompt返回值是用户输入框中的东西,不填返回null。有两个参数，第一个是窗口提示，第二个是输入框的默认值，confirm返回值是逻辑值。

* Math

`Math.floor()`(向下取整); `Math.random()`([0,1)随机);

* list

`list.push()` 末尾插入元素

### Object

两种定义方法，一种是直接定义，最后的一项可以不用逗号

```js
var me = {
    age: 29,
    name: 'liu',
};
```

或者

```js
var me = {};
me.name = 'liu';
me["age"] = 29;
```

另一种是用构造函数：

```js
var me = new Object();
me.name = 'liu';
me["age"] = 29;
```


### note
    
- 比较用===
- 函数、对象定义后面要分号

### 实例

```js
var slaying = true;
// A bit of new math magic to calculate the odds
// of hitting the dragon. We'll cover this soon!
var youHit = Math.floor(Math.random() * 2);
var totalDamage = 0;
var damageThisRound;

while (slaying) {
  if (youHit) {
    damageThisRound = Math.floor(Math.random() * 5 + 1);
    console.log("You hit the dragon and did " + damageThisRound + " damage!");
    totalDamage += damageThisRound;
    
    if (totalDamage >= 4) {
      console.log("You did it! You slew the dragon!");
      slaying = false;
    } else {
      youHit = Math.floor(Math.random() * 2);
    }
  } else {
    console.log("The dragon burninates you! You're toast.");
    slaying = false;
  }
}
```

```js
function  Person(name, age){
    this.name = name;
    this.age = age;
}
family = new Array();
family[0] = new Person('alice', 40); 
family[1] = new Person('bob', 42); 
family[2] = new Person('michelle', 8); 
family[3] = new Person('timmy', 6); 

for (var i = 0, n = family.length; i < n; i++) {
    console.log(family[i].name);
}
```
