<!--c-algoritm-->
## sort

----

常见的排序方法有[冒泡法](#bubble), [选择法](#selection), [插入法](#insertion) 等等，在介绍这些排序法之前，先说一个最基本的：在排序列表中查询。

### 二分法

在已经排好序列的数列中（从小到大），查询某个元素是否存在。非常基本的算法思想：分制法。常见的实现方法是用循环，当然也可以用迭代，不优雅。

```cpp
int binary_search(int value, int* arr, int n)
{
    int beginning = 0;
    int ending = n - 1;
    int middle; 

    while (ending >= beginning)
    {
        middle = (beginning + ending) / 2; 
        if (value == *(arr + middle))
            return 1; 
        else if (value < *(arr + middle))
            ending = middle - 1;
        else
            beginning = middle + 1;
    }
    return 0;
}
```
顺便说一下插入，也是排好序的，找到要插入位置的序号，基本跟前面一样

```cpp
int get_insertion_index(int value, int* arr, int n)
{
    int beginning = 0;
    int ending = n - 1;
    int middle; 

    while (ending >= beginning)
    {
        middle = (beginning + ending) / 2; 
        if (value == *(arr + middle))
            return middle; 
        else if (value < *(arr + middle))
            ending = middle - 1;
        else
            beginning = middle + 1;
    }
    if (value < *(arr + middle))
        return middle;
    else
        return middle + 1;
}
```
### bubble

最容易接触的排序方法，基本是进行一系列的遍历，每次移动都比较相邻两个元素的大小，把大者移动到后面。复杂度是$O(n^2)$，$\Omega(n)$

```cpp
void bubble_sort(int* arr, int n)
{
    for (int i = 0; i < n; i++)
    {
        int swaped = 0;
        for (int j = 0; j < n - 1; j++)
        {
            if (*(arr + j) > *(arr + j + 1))
            {
                swap(arr + j, arr + j + 1);
                swaped++;
            }
        }
        if(!swaped)
            break;
    }
}
```

### selection

选择法是非常容易理解的方法，对每次循环，选择最小的数，放在数列的前端，复杂度是$O(n^2)$, $\Omega(n^2)$，虽然实际上最坏的情况下计算量是 bubble sort 的一半，但是再最坏的情况下也是平方次的，所以一般情况下没有冒泡法好。


```cpp
void selection_sort(int* arr, int n)
{
    int index;
    for (int i = 0; i < n; i++)
    {
        index = i;
        for (int j = i + 1; j < n; j++)
            if (*(arr + index) > *(arr + j))
                index = j; 
        swap(arr + i, arr + index);
    }
}
```

### insertion

插入法大概是把数组分成两部分，前面一部分是排好的，后面一部分是待排序的，每次主循环选择待排序的第一个元素，将它插入到排好的序列中，这个过程就需要依次移动插入位置后面的所有元素，如果用链表什么的来存储，可以对插入部分进行优化。复杂度$O(n^2)$，$\Omega(n^2)$, 优化后，可以变成$O(n \log n)$

```cpp
void insertion_sort(int* arr, int n)
{
    for(int i = 0; i < n - 1; i++)
        for(int j = i; j >= 0; j--)
            if (*(arr + j + 1) < *(arr + j))
                swap(arr + j, arr + j + 1);
}
```

### merge

前面3种基本都是$O(n^2)$的复杂度，merge sort 是一个$O(n \log n)$复杂度的算法，基本思想就是分制，要排序一个数组，先排好前面一半，再排好后面一半，最后进行融合，需要格外的$O(n)$的空间，下面这个是用递归实现的(融合的部分还是有点技巧的)：

```cpp
void merge_sort(int* arr, int n)
{
    if (1 == n)
    NULL;
    else
    {
        // spit in half
        int m = n / 2;
        merge_sort(arr, m);
        merge_sort(arr + m, n - m);

        // make a copy
        int* tmp = malloc(sizeof(int) * n);
        for (int i = 0; i < n; i++)
            *(tmp + i) = *(arr + i);

        // merge
        int i = 0, j = m, k = 0;
        while (i < m && j < n)
            *(arr + k++) = (*(tmp + i) < *(tmp + j)) ? *(tmp + i++) : *(tmp + j++);

        // finish left part if didnot finished yet
        while (i < m)
            *(arr + k++) = *(tmp + i++);

        free(tmp);
    }
}
```

### counting

终于来了，$O(n)$的算法，前面所有的算法都是**基于比较的**，也就是说要进行比较，有证明表明所有基于比较的算法的复杂度不会低于$O(n \long n)$，如果要实现 $O(n)$的算法，就要采用不需要比较的，常见的有counting，bucket，基数法等。当然复杂度上的优势是有一些代价的，基本都有数的大小限制，部分限用于整数。这里先只说counting：

针对一个所有元素不超过M的正整数序列，可以创建M个计数格，如果某个数出现一次，就在这个格子的计数上加一。非常简单，输出也有缺陷，首先，限制挺多，其次，输入和输出其实不是一个东西（输出的数其实是新建的），所以仅对数排序还行，如果是复杂的结构体，就丢失了所以其他信息。

```cpp
void counting_sort(int* arr, int n)
{
    int* bucket = malloc(sizeof(int) * LIMIT);
    for (int i = 0; i < n; i++)
        (*(bucket + *(arr + i)))++;
    int j = 0;
    for (int i = 0; i < LIMIT; i++)
        while ((*(bucket + i))--)
            *(arr + j++) = i;
    free(bucket);
}
```
